/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// app/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MocPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// app/file-manager-utils.ts
var import_obsidian2 = require("obsidian");

// app/moc-management.ts
var import_obsidian = require("obsidian");

// app/constants.ts
var DEBOUNCE_TIMEOUTS = {
  MOC_LINKS_AUTO_UPDATE: 15e3,
  // 15 segundos
  UPDATE_INDEX_MOC_TREE: 100,
  // 100ms
  FILE_AUTO_RENAMING: 50,
  // 50ms
  SESSION_TIMEOUT: 500,
  // 500ms para sessões de rename
  CACHE_REFRESH_DELAY: 200
  // 200ms para aguardar atualização do cache do Obsidian
};
var FILE_PATTERNS = {
  MOC_SPAN_START: '<span class="moc-plugin-start">',
  MOC_SPAN_END: '<span class="moc-plugin-end"> </span>',
  MOC_REGEX: /<span class="moc-plugin-start">([\s\S]*?)<\/span>([\s\S]*?)<span class="moc-plugin-end">/
};
var DEFAULT_CONFIG = {
  LINE_BREAKS_DEFAULT: 10
};

// app/moc-management.ts
var MocAdministrator = class {
  constructor(pluginInjector, self_file) {
    this.app = pluginInjector.app;
    this.plugin = pluginInjector;
    this.self_file = self_file;
    this.settings = pluginInjector.settings;
    this.fileManager = new FileManagerUtils(pluginInjector);
  }
  connect() {
    this.MocLinks = this.generateMocConnections();
  }
  async deleteMocString(resetLines = true) {
    let mocRegex;
    if (resetLines) {
      mocRegex = /((?:^[ \t]*\r?\n)*)^---[\s\r\n]*<span class="moc-plugin-start">MOC Links:<\/span>[\s\S]*?<span class="moc-plugin-end">\s*<\/span>[\s\r\n]*---[\s\r\n]*((?:^[ \t]*\r?\n)*)$/gm;
    } else {
      mocRegex = /^---[\s\r\n]*<span class="moc-plugin-start">MOC Links:<\/span>[\s\S]*?<span class="moc-plugin-end">\s*<\/span>[\s\r\n]*---[\s\r\n]*/gm;
    }
    try {
      this.app.vault.process(this.self_file, (content) => {
        return content.replace(mocRegex, "");
      }).catch((err) => {
        console.error("Error deleting MOC string:", err);
      });
    } catch (err) {
      console.log(err);
    }
  }
  generateMocConnections() {
    const mocLinks = {
      parent: this.getParentLink(),
      children: this.getChildrenLinks(),
      files: this.getFilesLinks()
    };
    return mocLinks;
  }
  async updateMocLinks() {
    await this.deleteMocString(false);
    await this.mocInjectorToFile(0);
  }
  async mocLinksAutoUpdate() {
    if (this.fileManager.isIndexFile(this.self_file)) {
      const fileExists = await this.app.vault.adapter.exists(this.self_file.path);
      if (!fileExists) {
        console.warn(`File ${this.self_file.path} no longer exists, skipping MOC update`);
        return;
      }
      try {
        const mocAdministrator = new MocAdministrator(this.plugin, this.self_file);
        mocAdministrator.connect();
        await mocAdministrator.updateMocLinks();
      } catch (error) {
        console.error(`Error updating MOC for ${this.self_file.path}:`, error);
      }
    }
  }
  async updateIndexMocTree() {
    const files = this.app.vault.getMarkdownFiles().filter((file) => this.fileManager.isIndexFile(file));
    for (const file of files) {
      const fileExists = await this.app.vault.adapter.exists(file.path);
      if (fileExists) {
        const mocAdministrator = new MocAdministrator(this.plugin, file);
        mocAdministrator.connect();
        await mocAdministrator.updateMocLinks();
      } else {
        console.warn(`File ${file.path} no longer exists, skipping in updateIndexMocTree`);
      }
    }
  }
  //Updates Files inside the ObjectAdministrator
  getFilesLinks(self_file = this.self_file) {
    let filesArr = void 0;
    if (!self_file.parent) {
      filesArr = this.app.vault.getRoot().children.filter((absFile) => absFile instanceof import_obsidian.TFile && absFile.path !== self_file.path);
    } else {
      filesArr = self_file.parent.children.filter((absFile) => absFile instanceof import_obsidian.TFile && absFile.path !== self_file.path);
    }
    if (!filesArr || filesArr.length === 0) {
      return null;
    }
    return filesArr;
  }
  getParentLink(self_file = this.self_file) {
    let parentFolder = self_file.parent;
    if (!parentFolder) {
      return null;
    }
    parentFolder = parentFolder.parent;
    while (parentFolder) {
      const indexFilesChildren = parentFolder.children.filter((child) => {
        var _a;
        if (child instanceof import_obsidian.TFile) {
          const frontmatterCopy = (_a = this.app.metadataCache.getFileCache(child)) == null ? void 0 : _a.frontmatter;
          if (frontmatterCopy && frontmatterCopy[this.settings.mocPropertyKey] === this.settings.mocPropertyValue) {
            return true;
          }
        }
      });
      if (indexFilesChildren.length === 1) {
        return indexFilesChildren[0];
      } else if (indexFilesChildren.length > 1) {
        return indexFilesChildren[0];
      }
      parentFolder = parentFolder.parent;
    }
    return null;
  }
  getChildrenLinks(self_file = this.self_file) {
    const parentFolder = this.fileManager.getDirectParent(self_file);
    let childrenLinks = [];
    const recursiveChildrenFinder = (startingFolder) => {
      let directChildrenFolders = [];
      let directChildrenFiles = [];
      startingFolder.children.forEach((child) => {
        var _a;
        if (child instanceof import_obsidian.TFile) {
          const frontmatterCopy = (_a = this.app.metadataCache.getFileCache(child)) == null ? void 0 : _a.frontmatter;
          if (frontmatterCopy && frontmatterCopy[this.settings.mocPropertyKey] === this.settings.mocPropertyValue) {
            directChildrenFiles.push(child);
          }
        } else if (child instanceof import_obsidian.TFolder) {
          directChildrenFolders.push(child);
        }
      });
      if (directChildrenFiles.length === 0) {
        directChildrenFolders.forEach((folder) => {
          recursiveChildrenFinder(folder);
        });
      }
      if (directChildrenFiles.length > 1) {
      }
      childrenLinks = [...childrenLinks, ...directChildrenFiles];
    };
    parentFolder.children.forEach((child) => {
      if (child instanceof import_obsidian.TFolder) {
        recursiveChildrenFinder(child);
      }
    });
    if (childrenLinks.length === 0) {
      return null;
    }
    return childrenLinks;
  }
  mocStringGenerator() {
    const header = this.settings.mocHeader;
    const { parent, children, files } = this.MocLinks;
    const parentLinkString = parent ? `${this.app.fileManager.generateMarkdownLink(parent, this.self_file.path)}` : "*None*";
    const childrenLinksString = children && children.length > 0 ? children.map((child) => `- ${this.app.fileManager.generateMarkdownLink(child, this.self_file.path)}`).join("\n") : "- *None*";
    const filesLinksString = files && files.length > 0 ? files.map((file) => `- ${this.app.fileManager.generateMarkdownLink(file, this.self_file.path)}`).join("\n") : "- *None*";
    const mocString = `---
${FILE_PATTERNS.MOC_SPAN_START}${header}</span>
#### Parent:
- ${parentLinkString}
#### Children:
${childrenLinksString}
#### Files:
${filesLinksString}
${FILE_PATTERNS.MOC_SPAN_END}
---`;
    return mocString;
  }
  async mocInjectorToFile(lineBreaks = DEFAULT_CONFIG.LINE_BREAKS_DEFAULT) {
    try {
      const moc = this.mocStringGenerator();
      const returnValue = this.app.vault.process(this.self_file, (content) => {
        const endsWithNewline = content.endsWith("\n");
        const newContent = (endsWithNewline ? content : `${content}
`) + `${"\n".repeat(lineBreaks)}` + moc;
        return newContent;
      }).catch((err) => {
        console.error("Error inserting MOC links:", err);
      });
    } catch (error) {
      new import_obsidian.Notice(`Error inserting MOC links: ${error.message}, Check if the Moc Administrator is Connected to the file.`);
    }
  }
};

// app/file-manager-utils.ts
var FileManagerUtils = class {
  constructor(plugininjector) {
    this.app = plugininjector.app;
    this.plugin = plugininjector;
  }
  async createIndexFile(filePathWithName, content, propertyName, propertyValue, templatePathOverwritten) {
    let templatePath = templatePathOverwritten || this.plugin.settings.templatePath;
    if (templatePath) {
      try {
        const templateFile = this.app.vault.getFileByPath(templatePath);
        if (templateFile) {
          content = await this.app.vault.read(templateFile);
          console.log(content);
        } else {
          new import_obsidian2.Notice(`Template file not found: ${templatePath}`);
        }
      } catch (error) {
        new import_obsidian2.Notice(`Error reading template file: ${error.message}`);
      }
    }
    try {
      const file = await this.app.vault.create(filePathWithName, content);
      new import_obsidian2.Notice(`MOC file created: ${filePathWithName}`);
      await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
        frontmatter[propertyName] = propertyValue;
      });
      const mocAdministrator = new MocAdministrator(this.plugin, file);
      mocAdministrator.connect();
      await mocAdministrator.mocInjectorToFile();
      return file;
    } catch (error) {
      new import_obsidian2.Notice(`Error creating MOC file: ${error.message}`);
      return;
    }
  }
  createIndexFileNameAndPath(folder) {
    folder = folder || this.app.vault.getRoot();
    let folderNameCopy = folder == null ? void 0 : folder.name.replace(/\p{Emoji_Presentation}/gu, "");
    if (folder.isRoot()) {
      folderNameCopy = folder.vault.getName();
    }
    return `${folder.isRoot() ? "" : folder.path + "/"}${this.plugin.settings.indexFilePrefix}${this.plugin.settings.autoRenameIndexFile ? folderNameCopy.trim() : ""}${this.plugin.settings.indexFileSuffix}.md`;
  }
  async fileAutoRenaming(file, trackRename) {
    if (!this.isIndexFile(file)) {
      return;
    }
    const fileExists = await this.app.vault.adapter.exists(file.path);
    if (!fileExists) {
      return;
    }
    const parentFolder = this.getDirectParent(file);
    const newFileName = this.createIndexFileNameAndPath(parentFolder);
    if (newFileName !== file.path) {
      try {
        if (trackRename) {
          trackRename(file.path);
        }
        await this.app.fileManager.renameFile(file, newFileName);
        const newFileNameOnly = newFileName.split("/").pop() || "";
        if (newFileNameOnly !== "") {
          new import_obsidian2.Notice(`Index file renamed to: ${newFileNameOnly}`);
        }
      } catch (error) {
        console.error("Error renaming index file:", error);
      }
    }
  }
  async readFileMetadata(file) {
    return this.app.metadataCache.getFileCache(file);
  }
  filterFilesByProperty(propertyName, propertyValue) {
    var _a;
    const files = this.app.vault.getMarkdownFiles();
    const filteredFiles = [];
    for (const file of files) {
      const metadata = this.app.metadataCache.getFileCache(file);
      if (metadata && metadata.frontmatter) {
        if (metadata.frontmatter[propertyName] === propertyValue || ((_a = metadata.frontmatter[propertyName]) == null ? void 0 : _a.includes(propertyValue))) {
          filteredFiles.push(file);
        }
      }
    }
    return filteredFiles;
  }
  async folderAutoRenaming(absFile, trackRename) {
    var _a;
    if (absFile instanceof import_obsidian2.TFolder) {
      const folder = absFile;
      const folderName = this.insertEmojiInFolderName(folder.name);
      if (folderName !== folder.name) {
        const newPath = `${((_a = folder.parent) == null ? void 0 : _a.path) ? folder.parent.path + "/" : ""}${folderName}`;
        if (trackRename) {
          trackRename(folder.path);
        }
        await this.app.fileManager.renameFile(folder, newPath);
        new import_obsidian2.Notice(`Folder renamed to: ${folderName}`);
      }
    }
  }
  getDirectParent(AbsFile) {
    let parent = AbsFile.parent;
    if (!parent) {
      return this.app.vault.getRoot();
    } else {
      return parent;
    }
  }
  isIndexFile(absFile) {
    if (absFile instanceof import_obsidian2.TFile) {
      const metadata = this.app.metadataCache.getFileCache(absFile);
      const propertyName = this.plugin.settings.mocPropertyKey;
      const propertyValue = this.plugin.settings.mocPropertyValue;
      if (metadata && metadata.frontmatter) {
        return metadata.frontmatter[propertyName] === propertyValue && Object.keys(metadata.frontmatter).includes(propertyName);
      }
    }
    return false;
  }
  insertEmojiInFolderName(folderName) {
    const emoji = this.plugin.settings.autoFolderEmoji;
    if (folderName.startsWith(emoji)) {
      return folderName;
    }
    folderName = folderName.replace(/\p{Emoji_Presentation}/gu, "");
    return emoji ? `${emoji}${folderName}` : folderName;
  }
  /**
   * Obtém o caminho da pasta base para a sessão de rename
   */
  getBaseFolderPath(absFile, oldPath) {
    if (absFile instanceof import_obsidian2.TFolder) {
      return oldPath;
    }
    return oldPath.substring(0, oldPath.lastIndexOf("/"));
  }
  /**
   * Determina se a pasta renomeada é a pasta raiz sendo renomeada pelo usuário,
   * não uma pasta filha afetada por um rename de pasta pai
   */
  isRootRenamedFolder(renamedFolder, oldPath) {
    const oldParentPath = oldPath.substring(0, oldPath.lastIndexOf("/"));
    const newParentPath = renamedFolder.path.substring(0, renamedFolder.path.lastIndexOf("/"));
    return oldParentPath === newParentPath;
  }
  /**
   * Normaliza um caminho removendo barras no início e fim
   */
  normalizePath(path) {
    return path.replace(/^\/+|\/+$/g, "");
  }
  /**
   * Verifica se um caminho é filho de uma pasta base
   */
  isChildOfPath(childPath, basePath) {
    const normalizedBase = this.normalizePath(basePath);
    const normalizedChild = this.normalizePath(childPath);
    return normalizedChild === normalizedBase || normalizedChild.startsWith(normalizedBase + "/");
  }
};

// app/settings.ts
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = class {
  constructor() {
    this.mocPropertyKey = "moc-property";
    this.mocPropertyValue = "defaultValue";
    this.templatePath = void 0;
    this.pathExceptions = [];
    this.mocHeader = "MOC Links:";
    this.autoRenameIndexFile = false;
    this.indexFilePrefix = "Index - ";
    this.indexFileSuffix = "";
    this.autoFolderEmoji = "";
  }
};
var SettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Moc Property Key").setDesc("Set your desired property key to be used in MOC files").addText(
      (text) => text.setPlaceholder("Moc property key").setValue(this.plugin.settings.mocPropertyKey).onChange(async (value) => {
        this.plugin.settings.mocPropertyKey = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Moc Property Value").setDesc("Set your desired property value (to be found inside your property key) to be used in MOC files").addText(
      (text) => text.setPlaceholder("Moc property value").setValue(this.plugin.settings.mocPropertyValue).onChange(async (value) => {
        this.plugin.settings.mocPropertyValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Template Path").setDesc("Set the path to your template file (optional)").addText((text) => {
      text.setPlaceholder("Template path").onChange(async (value) => {
        this.plugin.settings.templatePath = value;
        await this.plugin.saveSettings();
      });
      if (this.plugin.settings.templatePath) {
        text.setValue(this.plugin.settings.templatePath);
      }
    });
    containerEl.createDiv({ text: "Ex: path/to/your/template.md", cls: ["setting-item-description", "space-separator"] });
    new import_obsidian3.Setting(containerEl).setName("Path Exceptions").setDesc("Set paths to be ignored by the plugin (separated by line breaks)").addTextArea((textArea) => {
      textArea.setPlaceholder("Path exceptions").setValue(this.plugin.settings.pathExceptions.join("\n")).onChange(async (value) => {
        this.plugin.settings.pathExceptions = value.split("\n").map((item) => item.trim());
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Index File Prefix").setDesc("Set the prefix for the index file name.").addText(
      (text) => text.setPlaceholder("Index File Prefix").setValue(this.plugin.settings.indexFilePrefix).onChange(async (value) => {
        this.plugin.settings.indexFilePrefix = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Index File Suffix").setDesc("Set the suffix for the index file name.").addText(
      (text) => text.setPlaceholder("Index File Suffix").setValue(this.plugin.settings.indexFileSuffix).onChange(async (value) => {
        this.plugin.settings.indexFileSuffix = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Auto-Emoji Folders").setDesc("Automatically add specified emoji to folder names' prefixes when created.").addText(
      (text) => text.setPlaceholder("Enter emoji").setValue(this.plugin.settings.autoFolderEmoji).onChange(async (value) => {
        this.plugin.settings.autoFolderEmoji = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Index File Auto-Rename from Folder Name Radical").setDesc("Automatically rename the index file to match the folder name when creating a new MOC file.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoRenameIndexFile).onChange(async (value) => {
        this.plugin.settings.autoRenameIndexFile = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Update File Tree").setDesc("Automatically update the File Moc tree and defined settings on click.").addButton((button) => button.setButtonText("Update").onClick(async () => {
      const anyFile = this.app.vault.getFiles().find((file) => file instanceof import_obsidian3.TFile);
      const mocAdmin = new MocAdministrator(this.plugin, anyFile);
      const allFolders = this.app.vault.getAllFolders().filter((file) => file instanceof import_obsidian3.TFolder);
      for (const folder of allFolders) {
        await this.plugin.FileManagerUtils.folderAutoRenaming(folder);
      }
      console.log(allFolders);
      mocAdmin.updateIndexMocTree();
    }));
  }
};

// app/event-handlers.ts
var import_obsidian4 = require("obsidian");
var EventHandlers = class {
  constructor(plugin) {
    this.pluginInitiatedRenames = /* @__PURE__ */ new Set();
    // Session tracking para distinguir user-initiated renames de cascading rename events
    // Quando o usuário renomeia uma pasta, Obsidian dispara eventos para todas as subpastas e arquivos
    // Este sistema rastreia a sessão para ignorar eventos cascateados e processar apenas o rename inicial
    this.userRenameSession = { processed: /* @__PURE__ */ new Set() };
    this.app = plugin.app;
    this.plugin = plugin;
    this.fileManagerUtils = new FileManagerUtils(plugin);
  }
  async loadEventHandlers() {
    const mocLinksAutoUpdateDebouncer = (0, import_obsidian4.debounce)(async (absFile) => {
      const mocAdministrator = new MocAdministrator(this.plugin, absFile);
      mocAdministrator.connect();
      await mocAdministrator.mocLinksAutoUpdate();
      mocLinksAutoUpdateDebouncer.cancel();
    }, DEBOUNCE_TIMEOUTS.MOC_LINKS_AUTO_UPDATE, true);
    const updateIndexMocTreeDebouncer = (0, import_obsidian4.debounce)(async (absFile) => {
      const mocAdministrator = new MocAdministrator(this.plugin, absFile);
      mocAdministrator.connect();
      await mocAdministrator.updateIndexMocTree();
    }, DEBOUNCE_TIMEOUTS.UPDATE_INDEX_MOC_TREE, true);
    const fileAutoRenamingDebouncer = (0, import_obsidian4.debounce)(async (absFile) => {
      await this.fileManagerUtils.fileAutoRenaming(absFile);
      fileAutoRenamingDebouncer.cancel();
    }, DEBOUNCE_TIMEOUTS.FILE_AUTO_RENAMING, true);
    let promiseStack = Promise.resolve();
    this.plugin.registerEvent(this.app.vault.on("create", (absFile) => {
      if (this.plugin.settings.pathExceptions.some((path) => absFile.path.includes(path))) {
        return;
      }
      if (absFile instanceof import_obsidian4.TFolder) {
        const fileNameAndPath = this.fileManagerUtils.createIndexFileNameAndPath(absFile);
        this.fileManagerUtils.createIndexFile(fileNameAndPath, "", this.plugin.settings.mocPropertyKey, this.plugin.settings.mocPropertyValue, this.plugin.settings.templatePath);
      }
    }));
    this.plugin.registerEvent(this.app.vault.on("rename", async (absFile, oldPath) => {
      var _a;
      if (this.plugin.settings.pathExceptions.some((path) => absFile.path.includes(path))) {
        return;
      }
      if (this.pluginInitiatedRenames.has(oldPath)) {
        if (absFile instanceof import_obsidian4.TFolder) {
          const normalizedOldPath = oldPath.replace(/^\/+|\/+$/g, "");
          const normalizedBasePath = (_a = this.userRenameSession.baseFolder) == null ? void 0 : _a.replace(/^\/+|\/+$/g, "");
          if (normalizedOldPath === normalizedBasePath || this.userRenameSession.processed.has(oldPath) || this.userRenameSession.processed.has(normalizedOldPath)) {
            this.userRenameSession.pluginRenamedFolder = absFile.path;
            this.resetSessionTimer();
          }
        }
        if (absFile instanceof import_obsidian4.TFile && this.fileManagerUtils.isIndexFile(absFile)) {
          promiseStack = promiseStack.then(async () => {
            await this.fileManagerUtils.fileAutoRenaming(absFile, (oldPath2) => {
              this.pluginInitiatedRenames.add(oldPath2);
            });
          });
        }
        this.pluginInitiatedRenames.delete(oldPath);
        return;
      }
      const isNewRenameSession = this.detectNewRenameSession(absFile, oldPath);
      if (isNewRenameSession) {
        this.startNewRenameSession(absFile, oldPath);
      } else if (this.isPartOfCurrentRenameSession(absFile, oldPath)) {
        return;
      }
      this.userRenameSession.processed.add(oldPath);
      if (absFile.path !== oldPath) {
        this.userRenameSession.processed.add(absFile.path);
      }
      this.resetSessionTimer();
      promiseStack = promiseStack.then(async () => {
        updateIndexMocTreeDebouncer(absFile);
      });
      try {
        if (absFile.name === oldPath.split("/").pop()) {
          if (absFile instanceof import_obsidian4.TFile && this.fileManagerUtils.isIndexFile(absFile)) {
            promiseStack = promiseStack.then(async () => {
              await this.fileManagerUtils.fileAutoRenaming(absFile, (oldPath2) => {
                this.pluginInitiatedRenames.add(oldPath2);
              });
            });
          }
        } else {
          if (this.plugin.settings.autoFolderEmoji !== "" && absFile instanceof import_obsidian4.TFolder) {
            promiseStack = promiseStack.then(async () => {
              await this.fileManagerUtils.folderAutoRenaming(absFile, (oldPath2) => {
                this.pluginInitiatedRenames.add(oldPath2);
              });
              await new Promise((resolve) => setTimeout(resolve, DEBOUNCE_TIMEOUTS.CACHE_REFRESH_DELAY));
              const filesInFolder = this.app.vault.getMarkdownFiles().filter(
                (file) => file.path.startsWith(absFile.path + "/")
              );
              const indexFiles = filesInFolder.filter(
                (file) => this.fileManagerUtils.isIndexFile(file)
              );
              for (const indexFile of indexFiles) {
                await this.fileManagerUtils.fileAutoRenaming(indexFile, (oldPath2) => {
                  this.pluginInitiatedRenames.add(oldPath2);
                });
              }
            });
          } else if (absFile instanceof import_obsidian4.TFile && this.fileManagerUtils.isIndexFile(absFile)) {
            promiseStack = promiseStack.then(async () => {
              await this.fileManagerUtils.fileAutoRenaming(absFile, (oldPath2) => {
                this.pluginInitiatedRenames.add(oldPath2);
              });
            });
          }
        }
      } catch (error) {
        console.error(`Error handling rename from ${oldPath} to ${absFile.path}:`, error);
      }
    }));
    this.plugin.registerEvent(this.app.vault.on("modify", (absFile) => {
      if (this.plugin.settings.pathExceptions.some((path) => absFile.path.includes(path))) {
        return;
      }
      mocLinksAutoUpdateDebouncer(absFile);
      updateIndexMocTreeDebouncer(absFile);
    }));
    this.plugin.registerEvent(this.app.vault.on("delete", async (absFile) => {
      if (this.plugin.settings.pathExceptions.some((path) => absFile.path.includes(path))) {
        return;
      }
      updateIndexMocTreeDebouncer(absFile);
    }));
  }
  /**
   * Inicia uma nova sessão de rename com timer debounced
   * Isso rastreia o rename inicial iniciado pelo usuário para distingui-lo de eventos cascateados
   */
  startNewRenameSession(absFile, oldPath) {
    if (this.userRenameSession.resetTimer) {
      clearTimeout(this.userRenameSession.resetTimer);
    }
    this.userRenameSession.baseFolder = this.fileManagerUtils.getBaseFolderPath(absFile, oldPath);
    this.userRenameSession.timestamp = Date.now();
    this.userRenameSession.processed.clear();
    this.resetSessionTimer();
  }
  /**
   * Reseta o timer da sessão (debounced)
   * Estende a sessão quando novos eventos de rename são detectados como parte da mesma operação
   */
  resetSessionTimer() {
    if (this.userRenameSession.resetTimer) {
      clearTimeout(this.userRenameSession.resetTimer);
    }
    this.userRenameSession.resetTimer = setTimeout(() => {
      this.clearRenameSession();
    }, DEBOUNCE_TIMEOUTS.SESSION_TIMEOUT);
  }
  /**
   * Clears the current rename session
   */
  clearRenameSession() {
    if (this.userRenameSession.resetTimer) {
      clearTimeout(this.userRenameSession.resetTimer);
    }
    this.userRenameSession.baseFolder = void 0;
    this.userRenameSession.pluginRenamedFolder = void 0;
    this.userRenameSession.timestamp = void 0;
    this.userRenameSession.processed.clear();
    this.userRenameSession.resetTimer = void 0;
  }
  /**
   * Detecta se este é o início de uma nova sessão de rename do usuário
   * Retorna true para renames genuínos iniciados pelo usuário, false para eventos cascateados
   */
  detectNewRenameSession(absFile, oldPath) {
    if (!this.userRenameSession.timestamp || !this.userRenameSession.baseFolder) {
      return true;
    }
    const wasProcessed = this.userRenameSession.processed.has(oldPath);
    const isChild = this.isChildOfBaseFolder(oldPath);
    return !wasProcessed && !isChild;
  }
  /**
   * Checks if this rename is part of the current rename session (cascading effect)
   */
  isPartOfCurrentRenameSession(absFile, oldPath) {
    if (!this.userRenameSession.timestamp || !this.userRenameSession.baseFolder) {
      return false;
    }
    return this.isChildOfBaseFolder(oldPath);
  }
  /**
   * Verifica se um caminho é filho da pasta base atual sendo renomeada
   * Isso inclui verificar contra:
   * - Caminho da pasta base original
   * - Caminho da pasta plugin-renamed (após emoji prefix ser adicionado)
   * - Quaisquer caminhos intermediários processados durante a cadeia de rename
   */
  isChildOfBaseFolder(path) {
    if (!this.userRenameSession.baseFolder) {
      return false;
    }
    if (this.fileManagerUtils.isChildOfPath(path, this.userRenameSession.baseFolder)) {
      return true;
    }
    if (this.userRenameSession.pluginRenamedFolder) {
      if (this.fileManagerUtils.isChildOfPath(path, this.userRenameSession.pluginRenamedFolder)) {
        return true;
      }
    }
    for (const processedPath of this.userRenameSession.processed) {
      if (this.fileManagerUtils.isChildOfPath(path, processedPath)) {
        return true;
      }
    }
    return false;
  }
};

// app/main.ts
var MocPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.FileManagerUtils = new FileManagerUtils(this);
    this.EventHandlers = new EventHandlers(this);
    this.EventHandlers.loadEventHandlers();
    this.addCommand({
      id: "update-moc-string",
      name: "Update Moc-String on Command",
      callback: async () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          const mocAdministrator = new MocAdministrator(this, activeFile);
          await mocAdministrator.updateMocLinks();
          new import_obsidian5.Notice(`MOC Links updated for ${activeFile.name}`);
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      new DEFAULT_SETTINGS(),
      await this.loadData()
    );
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
