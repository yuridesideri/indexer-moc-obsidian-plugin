/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var N=(h,t)=>{for(var e in t)w(h,e,{get:t[e],enumerable:!0})},_=(h,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of v(t))!I.call(h,i)&&i!==e&&w(h,i,{get:()=>t[i],enumerable:!(s=C(t,i))||s.enumerable});return h};var O=h=>_(w({},"__esModule",{value:!0}),h);var k={};N(k,{default:()=>y});module.exports=O(k);var E=require("obsidian");var d=require("obsidian");var g=require("obsidian");var T={MOC_LINKS_AUTO_UPDATE:15e3,UPDATE_INDEX_MOC_TREE:100,FILE_AUTO_RENAMING:50,SESSION_TIMEOUT:500,CACHE_REFRESH_DELAY:200},R={MOC_SPAN_START:'<span class="moc-plugin-start">',MOC_SPAN_END:'<span class="moc-plugin-end"> </span>',MOC_REGEX:/<span class="moc-plugin-start">([\s\S]*?)<\/span>([\s\S]*?)<span class="moc-plugin-end">/},P={LINE_BREAKS_DEFAULT:10};var p=class{constructor(t,e){this.app=t.app,this.plugin=t,this.self_file=e,this.settings=t.settings,this.fileManager=new f(t)}connect(){this.MocLinks=this.generateMocConnections()}async deleteMocString(t=!0){let e;t?e=/((?:^[ \t]*\r?\n)*)^---[\s\r\n]*<span class="moc-plugin-start">MOC Links:<\/span>[\s\S]*?<span class="moc-plugin-end">\s*<\/span>[\s\r\n]*---[\s\r\n]*((?:^[ \t]*\r?\n)*)$/gm:e=/^---[\s\r\n]*<span class="moc-plugin-start">MOC Links:<\/span>[\s\S]*?<span class="moc-plugin-end">\s*<\/span>[\s\r\n]*---[\s\r\n]*/gm;try{this.app.vault.process(this.self_file,s=>s.replace(e,"")).catch(s=>{console.error("Error deleting MOC string:",s)})}catch(s){console.log(s)}}generateMocConnections(){return{parent:this.getParentLink(),children:this.getChildrenLinks(),files:this.getFilesLinks()}}async updateMocLinks(){await this.deleteMocString(!1),await this.mocInjectorToFile(0)}async mocLinksAutoUpdate(){if(this.fileManager.isIndexFile(this.self_file)){if(!await this.app.vault.adapter.exists(this.self_file.path)){console.warn(`File ${this.self_file.path} no longer exists, skipping MOC update`);return}try{let e=new p(this.plugin,this.self_file);e.connect(),await e.updateMocLinks()}catch(e){console.error(`Error updating MOC for ${this.self_file.path}:`,e)}}}async updateIndexMocTree(){let t=this.app.vault.getMarkdownFiles().filter(e=>this.fileManager.isIndexFile(e));for(let e of t)if(await this.app.vault.adapter.exists(e.path)){let i=new p(this.plugin,e);i.connect(),await i.updateMocLinks()}else console.warn(`File ${e.path} no longer exists, skipping in updateIndexMocTree`)}getFilesLinks(t=this.self_file){let e;return t.parent?e=t.parent.children.filter(s=>s instanceof g.TFile&&s.path!==t.path):e=this.app.vault.getRoot().children.filter(s=>s instanceof g.TFile&&s.path!==t.path),!e||e.length===0?null:e}getParentLink(t=this.self_file){let e=t.parent;if(!e)return null;for(e=e.parent;e;){let s=e.children.filter(i=>{var n;if(i instanceof g.TFile){let a=(n=this.app.metadataCache.getFileCache(i))==null?void 0:n.frontmatter;if(a&&a[this.settings.mocPropertyKey]===this.settings.mocPropertyValue)return!0}});if(s.length===1)return s[0];if(s.length>1)return s[0];e=e.parent}return null}getChildrenLinks(t=this.self_file){let e=this.fileManager.getDirectParent(t),s=[],i=n=>{let a=[],r=[];n.children.forEach(c=>{var o;if(c instanceof g.TFile){let F=(o=this.app.metadataCache.getFileCache(c))==null?void 0:o.frontmatter;F&&F[this.settings.mocPropertyKey]===this.settings.mocPropertyValue&&r.push(c)}else c instanceof g.TFolder&&a.push(c)}),r.length===0&&a.forEach(c=>{i(c)}),r.length>1,s=[...s,...r]};return e.children.forEach(n=>{n instanceof g.TFolder&&i(n)}),s.length===0?null:s}mocStringGenerator(){let t=this.settings.mocHeader,{parent:e,children:s,files:i}=this.MocLinks,n=e?`${this.app.fileManager.generateMarkdownLink(e,this.self_file.path)}`:"*None*",a=s&&s.length>0?s.map(o=>`- ${this.app.fileManager.generateMarkdownLink(o,this.self_file.path)}`).join(`
`):"- *None*",r=i&&i.length>0?i.map(o=>`- ${this.app.fileManager.generateMarkdownLink(o,this.self_file.path)}`).join(`
`):"- *None*";return`---
${R.MOC_SPAN_START}${t}</span>
#### Parent:
- ${n}
#### Children:
${a}
#### Files:
${r}
${R.MOC_SPAN_END}
---`}async mocInjectorToFile(t=P.LINE_BREAKS_DEFAULT){try{let e=this.mocStringGenerator(),s=this.app.vault.process(this.self_file,i=>(i.endsWith(`
`)?i:`${i}
`)+`${`
`.repeat(t)}`+e).catch(i=>{console.error("Error inserting MOC links:",i)})}catch(e){new g.Notice(`Error inserting MOC links: ${e.message}, Check if the Moc Administrator is Connected to the file.`)}}};var f=class{constructor(t){this.app=t.app,this.plugin=t}async createIndexFile(t,e,s,i,n){let a=n||this.plugin.settings.templatePath;if(a)try{let r=this.app.vault.getFileByPath(a);r?(e=await this.app.vault.read(r),console.log(e)):new d.Notice(`Template file not found: ${a}`)}catch(r){new d.Notice(`Error reading template file: ${r.message}`)}try{let r=await this.app.vault.create(t,e);new d.Notice(`MOC file created: ${t}`),await this.app.fileManager.processFrontMatter(r,o=>{o[s]=i});let c=new p(this.plugin,r);return c.connect(),await c.mocInjectorToFile(),r}catch(r){new d.Notice(`Error creating MOC file: ${r.message}`);return}}createIndexFileNameAndPath(t){t=t||this.app.vault.getRoot();let e=t==null?void 0:t.name.replace(/\p{Emoji_Presentation}/gu,"");return t.isRoot()&&(e=t.vault.getName()),`${t.isRoot()?"":t.path+"/"}${this.plugin.settings.indexFilePrefix}${this.plugin.settings.autoRenameIndexFile?e.trim():""}${this.plugin.settings.indexFileSuffix}.md`}async fileAutoRenaming(t,e){if(!this.isIndexFile(t)||!await this.app.vault.adapter.exists(t.path))return;let i=this.getDirectParent(t),n=this.createIndexFileNameAndPath(i);if(n!==t.path)try{e&&e(t.path),await this.app.fileManager.renameFile(t,n);let a=n.split("/").pop()||"";a!==""&&new d.Notice(`Index file renamed to: ${a}`)}catch(a){console.error("Error renaming index file:",a)}}async readFileMetadata(t){return this.app.metadataCache.getFileCache(t)}filterFilesByProperty(t,e){var n;let s=this.app.vault.getMarkdownFiles(),i=[];for(let a of s){let r=this.app.metadataCache.getFileCache(a);r&&r.frontmatter&&(r.frontmatter[t]===e||(n=r.frontmatter[t])!=null&&n.includes(e))&&i.push(a)}return i}async folderAutoRenaming(t,e){var s;if(t instanceof d.TFolder){let i=t,n=this.insertEmojiInFolderName(i.name);if(n!==i.name){let a=`${(s=i.parent)!=null&&s.path?i.parent.path+"/":""}${n}`;e&&e(i.path),await this.app.fileManager.renameFile(i,a),new d.Notice(`Folder renamed to: ${n}`)}}}getDirectParent(t){let e=t.parent;return e||this.app.vault.getRoot()}isIndexFile(t){if(t instanceof d.TFile){let e=this.app.metadataCache.getFileCache(t),s=this.plugin.settings.mocPropertyKey,i=this.plugin.settings.mocPropertyValue;if(e&&e.frontmatter)return e.frontmatter[s]===i&&Object.keys(e.frontmatter).includes(s)}return!1}insertEmojiInFolderName(t){let e=this.plugin.settings.autoFolderEmoji;return t.startsWith(e)?t:(t=t.replace(/\p{Emoji_Presentation}/gu,""),e?`${e}${t}`:t)}getBaseFolderPath(t,e){return t instanceof d.TFolder?e:e.substring(0,e.lastIndexOf("/"))}isRootRenamedFolder(t,e){let s=e.substring(0,e.lastIndexOf("/")),i=t.path.substring(0,t.path.lastIndexOf("/"));return s===i}normalizePath(t){return t.replace(/^\/+|\/+$/g,"")}isChildOfPath(t,e){let s=this.normalizePath(e),i=this.normalizePath(t);return i===s||i.startsWith(s+"/")}};var l=require("obsidian");var S=class{constructor(){this.mocPropertyKey="moc-property";this.mocPropertyValue="defaultValue";this.templatePath=void 0;this.pathExceptions=[];this.mocHeader="MOC Links:";this.autoRenameIndexFile=!1;this.indexFilePrefix="Index - ";this.indexFileSuffix="";this.autoFolderEmoji=""}},x=class extends l.PluginSettingTab{constructor(e,s){super(e,s);this.plugin=s}display(){let{containerEl:e}=this;e.empty(),new l.Setting(e).setName("Moc Property Key").setDesc("Set your desired property key to be used in MOC files").addText(s=>s.setPlaceholder("Moc property key").setValue(this.plugin.settings.mocPropertyKey).onChange(async i=>{this.plugin.settings.mocPropertyKey=i,await this.plugin.saveSettings()})),new l.Setting(e).setName("Moc Property Value").setDesc("Set your desired property value (to be found inside your property key) to be used in MOC files").addText(s=>s.setPlaceholder("Moc property value").setValue(this.plugin.settings.mocPropertyValue).onChange(async i=>{this.plugin.settings.mocPropertyValue=i,await this.plugin.saveSettings()})),new l.Setting(e).setName("Template Path").setDesc("Set the path to your template file (optional)").addText(s=>{s.setPlaceholder("Template path").onChange(async i=>{this.plugin.settings.templatePath=i,await this.plugin.saveSettings()}),this.plugin.settings.templatePath&&s.setValue(this.plugin.settings.templatePath)}),e.createDiv({text:"Ex: path/to/your/template.md",cls:["setting-item-description","space-separator"]}),new l.Setting(e).setName("Path Exceptions").setDesc("Set paths to be ignored by the plugin (separated by line breaks)").addTextArea(s=>{s.setPlaceholder("Path exceptions").setValue(this.plugin.settings.pathExceptions.join(`
`)).onChange(async i=>{this.plugin.settings.pathExceptions=i.split(`
`).map(n=>n.trim()),await this.plugin.saveSettings()})}),new l.Setting(e).setName("Index File Prefix").setDesc("Set the prefix for the index file name.").addText(s=>s.setPlaceholder("Index File Prefix").setValue(this.plugin.settings.indexFilePrefix).onChange(async i=>{this.plugin.settings.indexFilePrefix=i,await this.plugin.saveSettings()})),new l.Setting(e).setName("Index File Suffix").setDesc("Set the suffix for the index file name.").addText(s=>s.setPlaceholder("Index File Suffix").setValue(this.plugin.settings.indexFileSuffix).onChange(async i=>{this.plugin.settings.indexFileSuffix=i,await this.plugin.saveSettings()})),new l.Setting(e).setName("Auto-Emoji Folders").setDesc("Automatically add specified emoji to folder names' prefixes when created.").addText(s=>s.setPlaceholder("Enter emoji").setValue(this.plugin.settings.autoFolderEmoji).onChange(async i=>{this.plugin.settings.autoFolderEmoji=i,await this.plugin.saveSettings()})),new l.Setting(e).setName("Index File Auto-Rename from Folder Name Radical").setDesc("Automatically rename the index file to match the folder name when creating a new MOC file.").addToggle(s=>s.setValue(this.plugin.settings.autoRenameIndexFile).onChange(async i=>{this.plugin.settings.autoRenameIndexFile=i,await this.plugin.saveSettings()})),new l.Setting(e).setName("Update File Tree").setDesc("Automatically update the File Moc tree and defined settings on click.").addButton(s=>s.setButtonText("Update").onClick(async()=>{let i=this.app.vault.getFiles().find(r=>r instanceof l.TFile),n=new p(this.plugin,i),a=this.app.vault.getAllFolders().filter(r=>r instanceof l.TFolder);for(let r of a)await this.plugin.FileManagerUtils.folderAutoRenaming(r);console.log(a),n.updateIndexMocTree()}))}};var u=require("obsidian");var M=class{constructor(t){this.pluginInitiatedRenames=new Set;this.userRenameSession={processed:new Set};this.app=t.app,this.plugin=t,this.fileManagerUtils=new f(t)}async loadEventHandlers(){let t=(0,u.debounce)(async n=>{let a=new p(this.plugin,n);a.connect(),await a.mocLinksAutoUpdate(),t.cancel()},T.MOC_LINKS_AUTO_UPDATE,!0),e=(0,u.debounce)(async n=>{let a=new p(this.plugin,n);a.connect(),await a.updateIndexMocTree()},T.UPDATE_INDEX_MOC_TREE,!0),s=(0,u.debounce)(async n=>{await this.fileManagerUtils.fileAutoRenaming(n),s.cancel()},T.FILE_AUTO_RENAMING,!0),i=Promise.resolve();this.plugin.registerEvent(this.app.vault.on("create",n=>{if(!this.plugin.settings.pathExceptions.some(a=>n.path.includes(a))&&n instanceof u.TFolder){let a=this.fileManagerUtils.createIndexFileNameAndPath(n);this.fileManagerUtils.createIndexFile(a,"",this.plugin.settings.mocPropertyKey,this.plugin.settings.mocPropertyValue,this.plugin.settings.templatePath)}})),this.plugin.registerEvent(this.app.vault.on("rename",async(n,a)=>{var c;if(this.plugin.settings.pathExceptions.some(o=>n.path.includes(o)))return;if(this.pluginInitiatedRenames.has(a)){if(n instanceof u.TFolder){let o=a.replace(/^\/+|\/+$/g,""),F=(c=this.userRenameSession.baseFolder)==null?void 0:c.replace(/^\/+|\/+$/g,"");(o===F||this.userRenameSession.processed.has(a)||this.userRenameSession.processed.has(o))&&(this.userRenameSession.pluginRenamedFolder=n.path,this.resetSessionTimer())}n instanceof u.TFile&&this.fileManagerUtils.isIndexFile(n)&&(i=i.then(async()=>{await this.fileManagerUtils.fileAutoRenaming(n,o=>{this.pluginInitiatedRenames.add(o)})})),this.pluginInitiatedRenames.delete(a);return}if(this.detectNewRenameSession(n,a))this.startNewRenameSession(n,a);else if(this.isPartOfCurrentRenameSession(n,a))return;this.userRenameSession.processed.add(a),n.path!==a&&this.userRenameSession.processed.add(n.path),this.resetSessionTimer(),i=i.then(async()=>{e(n)});try{n.name===a.split("/").pop()?n instanceof u.TFile&&this.fileManagerUtils.isIndexFile(n)&&(i=i.then(async()=>{await this.fileManagerUtils.fileAutoRenaming(n,o=>{this.pluginInitiatedRenames.add(o)})})):this.plugin.settings.autoFolderEmoji!==""&&n instanceof u.TFolder?i=i.then(async()=>{await this.fileManagerUtils.folderAutoRenaming(n,m=>{this.pluginInitiatedRenames.add(m)}),await new Promise(m=>setTimeout(m,T.CACHE_REFRESH_DELAY));let F=this.app.vault.getMarkdownFiles().filter(m=>m.path.startsWith(n.path+"/")).filter(m=>this.fileManagerUtils.isIndexFile(m));for(let m of F)await this.fileManagerUtils.fileAutoRenaming(m,A=>{this.pluginInitiatedRenames.add(A)})}):n instanceof u.TFile&&this.fileManagerUtils.isIndexFile(n)&&(i=i.then(async()=>{await this.fileManagerUtils.fileAutoRenaming(n,o=>{this.pluginInitiatedRenames.add(o)})}))}catch(o){console.error(`Error handling rename from ${a} to ${n.path}:`,o)}})),this.plugin.registerEvent(this.app.vault.on("modify",n=>{this.plugin.settings.pathExceptions.some(a=>n.path.includes(a))||(t(n),e(n))})),this.plugin.registerEvent(this.app.vault.on("delete",async n=>{this.plugin.settings.pathExceptions.some(a=>n.path.includes(a))||e(n)}))}startNewRenameSession(t,e){this.userRenameSession.resetTimer&&clearTimeout(this.userRenameSession.resetTimer),this.userRenameSession.baseFolder=this.fileManagerUtils.getBaseFolderPath(t,e),this.userRenameSession.timestamp=Date.now(),this.userRenameSession.processed.clear(),this.resetSessionTimer()}resetSessionTimer(){this.userRenameSession.resetTimer&&clearTimeout(this.userRenameSession.resetTimer),this.userRenameSession.resetTimer=setTimeout(()=>{this.clearRenameSession()},T.SESSION_TIMEOUT)}clearRenameSession(){this.userRenameSession.resetTimer&&clearTimeout(this.userRenameSession.resetTimer),this.userRenameSession.baseFolder=void 0,this.userRenameSession.pluginRenamedFolder=void 0,this.userRenameSession.timestamp=void 0,this.userRenameSession.processed.clear(),this.userRenameSession.resetTimer=void 0}detectNewRenameSession(t,e){if(!this.userRenameSession.timestamp||!this.userRenameSession.baseFolder)return!0;let s=this.userRenameSession.processed.has(e),i=this.isChildOfBaseFolder(e);return!s&&!i}isPartOfCurrentRenameSession(t,e){return!this.userRenameSession.timestamp||!this.userRenameSession.baseFolder?!1:this.isChildOfBaseFolder(e)}isChildOfBaseFolder(t){if(!this.userRenameSession.baseFolder)return!1;if(this.fileManagerUtils.isChildOfPath(t,this.userRenameSession.baseFolder)||this.userRenameSession.pluginRenamedFolder&&this.fileManagerUtils.isChildOfPath(t,this.userRenameSession.pluginRenamedFolder))return!0;for(let e of this.userRenameSession.processed)if(this.fileManagerUtils.isChildOfPath(t,e))return!0;return!1}};var y=class extends E.Plugin{async onload(){await this.loadSettings(),this.FileManagerUtils=new f(this),this.EventHandlers=new M(this),this.EventHandlers.loadEventHandlers(),this.addCommand({id:"update-moc-string",name:"Update Moc-String on Command",callback:async()=>{let e=this.app.workspace.getActiveFile();e&&(await new p(this,e).updateMocLinks(),new E.Notice(`MOC Links updated for ${e.name}`))}})}onunload(){}async loadSettings(){this.settings=Object.assign({},new S,await this.loadData()),this.addSettingTab(new x(this.app,this))}async saveSettings(){await this.saveData(this.settings)}};
